/**
 * This object will interact as Screen Manager. It will control EVERYTHING that happens into the Rampage graphical environment.
 * Every window generated by Rampage will register its instance here.
 * When Rampage need an element for the screen, it will ask here.
 *
 * @author Pelayo Sanchez Margareto
 * @date Mar 07th, 2011
 * @version 1.0
 *
 * @uses Rampage.structures.List()
 */

Rampage.gui.Screen = {
    _enabled : false,
    _wrapper : null,
    _store : null,
    _serialUIDPrefix : 'Rampage_screen_element_',
    _serialUIDCurrent : 0,
    

    _init : function() {
        this._wrapper = Rampage.util.Gui.getWrapper();
        this._store = new Rampage.structures.List();
    },

    /**
     * This function will register a window into the screen to get it always controlled
     * @param element The element to register
     * @return String The serialUID assigned to the element.
     */
    register : function(element) {
        if(!this._store) this._init();
        this._store.add(element);
        return this._serialUIDPrefix+this._serialUIDCurrent++;
    },

    show : function(element) {
        this._wrapper.appendChild(element);
    },

    unregister : function(src) {
        while((src = src.offsetParent).id.indexOf(Rampage.gui.Screen._serialUIDPrefix) == -1) {}
        var iterator = Rampage.gui.Screen._store.createIterator();
        while(iterator.areMore()) {
            if(src.id == iterator.getCurrent()._serialUID) {
                iterator.remove();
                break;
            }
            iterator = iterator.next();
        }
        Rampage.gui.Screen._wrapper.removeChild(src);
        if(Rampage.gui.Screen._wrapper.childNodes.length == 0) {
            Rampage.util.Gui.disable();
        }
    }
}

Rampage.ready();